#!/bin/sh
#
# rc.sg1100.install_to_emmc
#
# part of pfSense (https://www.pfsense.org)
# Copyright (c) 2004-2016 Rubicon Communications, LLC (Netgate)
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# make sure the user can't kill us by pressing Ctrl-C,
# ctrl-z, etc.
trap : 2
trap : 3
trap : 4

read -p "This operation will erase the eMMC, do you want to continue ? (y/N) " confirm
case "${confirm}" in
[Yy] | [Yy][Ee] | [Yy][Ee][Ss])
	break
	;;
*)
	echo exiting.
	exit 0
esac

# Find the eMMC device
for DEV in mmcsd0 mmcsd1
do
	MMCHC=$(/sbin/geom disk list ${DEV} 2> /dev/null | /usr/bin/grep MMCHC)
	if [ -n "${MMCHC}" ]; then
		MMCDEV=${DEV}
		break;
	fi
done
if [ -z "${MMCHC}" ]; then
	echo
	echo "no eMMC device detected.  aborting."
	sleep 5
	exit 1
fi

echo "Erasing eMMC..."
/bin/dd if=/dev/zero of=/dev/${MMCDEV} bs=64k count=800

echo "Creating EFI boot partition on eMMC"
/sbin/gpart create -s MBR ${MMCDEV}
/sbin/gpart add -s 1600 -t '!239' ${MMCDEV}
/bin/dd if=/boot/boot1.efifat of=/dev/${MMCDEV}s1 bs=512 count=1600

echo "Creating DTB (FAT32) partition on eMMC"
/sbin/gpart add -s 35006k -t fat32 ${MMCDEV}
/sbin/newfs_msdos -c 1 -F 32 /dev/${MMCDEV}s2
/sbin/mount_msdosfs /dev/${MMCDEV}s2 /mnt
if [ $? -ne 0 ]; then
	echo "ERROR! Impossible to mount /mnt"
	exit 1
fi
/bin/cp /boot/dtb/armada-3720-sg1100.dtb /mnt
umount /mnt

echo "Creating pfSense partition on eMMC"
/sbin/gpart add -t freebsd ${MMCDEV}
/sbin/newfs -UjE /dev/${MMCDEV}s3

echo "Mounting pfSense partition"
DISKID=$(/sbin/glabel status -s "${MMCDEV}" 2>/dev/null \
	| /usr/bin/head -n 1 | /usr/bin/cut -d' ' -f1)
if [ -z "${DISKID}" ]; then
	echo
	echo "error obtaining DISKID.  aborting."
	sleep 5
	exit 1
fi

/sbin/mount /dev/${DISKID}s3 /mnt
if [ $? -ne 0 ]; then
	echo "ERROR! Impossible to mount /mnt"
	exit 1
fi

echo
echo "Copying the system from SD to eMMC"

/usr/bin/tar -cf - -C / \
	--exclude usr/src \
	--exclude usr/ports \
	--exclude usr/obj \
	--exclude 'usr/swap*' \
	--exclude mnt \
	--exclude .sujournal \
	--exclude var/run \
	--exclude dev \
	--exclude tmp \
	. \
| /usr/bin/tar -xf - -C /mnt

echo
echo "Cleaning up the copied system"
# Reset permissions, ensure the required directories
(cd /mnt ; mtree -Uief /etc/mtree/BSD.root.dist)
(cd /mnt/usr ; mtree -Uief /etc/mtree/BSD.usr.dist)
(cd /mnt/usr/include ; mtree -Uief /etc/mtree/BSD.include.dist)
(cd /mnt/var ; mtree -Uief /etc/mtree/BSD.var.dist)
# Remove existing SSH host keys
rm -f /mnt/etc/ssh/*key*

# Fix fstab
# Found available label for the DTB FAT slice.
idx=0
while [ -e "/dev/label/DTBFAT${idx}" ]; do
	idx=$((idx+1))
done
DTBFAT_LABEL="DTBFAT${idx}"
if ! /sbin/glabel label ${DTBFAT_LABEL} "/dev/${MMCDEV}s2"; then
	echo
	echo "error setting the DTB FAT label.  aborting."
	exit 1
fi

/usr/bin/sed -i '' \
	-e "/[[:blank:]]\/boot\/msdos[[:blank:]]/ s,^/dev/[^[:blank:]]*,/dev/label/${DTBFAT_LABEL}," \
	-e "/[[:blank:]]\/[[:blank:]]/ s,^/dev/[^[:blank:]]*,/dev/${DISKID}s3," \
	/mnt/etc/fstab

/bin/mkdir -p /mnt/boot/msdos

umount /mnt
sync ; sync ; sync

echo
echo "System copied."
echo
echo "To reboot from eMMC:"
echo " * Clean shutdown: halt system (option 6)"
echo " * Remove the power"
echo " * Remove the boot media"
echo " * Reapply power"
echo
echo
